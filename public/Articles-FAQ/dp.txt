How DP Algorithm works?

Dynamic Programming (DP) is an optimization technique used to solve complex problems by breaking them down into simpler subproblems. It is particularly effective for problems that have overlapping subproblems and optimal substructure. The core idea of DP is to store the results of already solved subproblems so that they don't have to be recomputed, which significantly reduces the computational time.

Key Concepts in Dynamic Programming:

1.Overlapping Subproblems: Problems can be broken down into smaller, repetitive subproblems. If a problem can be divided into overlapping subproblems, it is suitable for dynamic programming. Instead of solving the same subproblems repeatedly, DP stores the results of these subproblems in a data structure like an array or a table.

2.Optimal Substructure: A problem has an optimal substructure if its optimal solution can be constructed efficiently from the optimal solutions of its subproblems. In other words, the best solution to the problem depends on the best solutions to its smaller subproblems.

DP Approach

Dynamic programming can be approached in two main ways:

1.Top-Down Approach:

Start solving the problem recursively.
Store the results of each subproblem in a data structure (like an array or dictionary).
If the same subproblem appears again, return the stored result instead of recalculating it.
This approach involves using recursion and storing results to avoid redundant calculations.

2.Bottom-Up Approach (Tabulation):

Solve all the smaller subproblems first.
Use their results to build up the solution to the larger problem iteratively.
This approach usually involves creating a table or grid where you fill in the solution to subproblems starting from the smallest ones.

.Characteristics of DP Problems

Choice: Identify the decisions you need to make at each step.

State: Define the state that represents a subproblem.

Transition: Formulate how to move from one state to another.

Base Case: Specify the base cases that terminate the recursion or iteration.

.Common Applications of DP:

Knapsack problems

Longest Common Subsequence (LCS)

Longest Increasing Subsequence (LIS)

Shortest path problems

Coin change problem